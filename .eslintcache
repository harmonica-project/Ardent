[{"/Users/nicolas/Documents/Development/slr-extraction-tool/src/index.js":"1","/Users/nicolas/Documents/Development/slr-extraction-tool/src/App.js":"2","/Users/nicolas/Documents/Development/slr-extraction-tool/src/reportWebVitals.js":"3","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/navbar/Navbar.js":"4","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/home/Home.js":"5","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/architecture/ArchitectureList.js":"6","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/architecture/Architecture.js":"7","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/error/ErrorPage.js":"8","/Users/nicolas/Documents/Development/slr-extraction-tool/src/assets/js/fakeData.js":"9","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/component/ArchitecturalComponent.js":"10"},{"size":500,"mtime":1608743268744,"results":"11","hashOfConfig":"12"},{"size":2508,"mtime":1608921875938,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608743268747,"results":"14","hashOfConfig":"12"},{"size":1082,"mtime":1608743268739,"results":"15","hashOfConfig":"12"},{"size":1270,"mtime":1608743268737,"results":"16","hashOfConfig":"12"},{"size":2019,"mtime":1608743268732,"results":"17","hashOfConfig":"12"},{"size":6894,"mtime":1608918335983,"results":"18","hashOfConfig":"12"},{"size":201,"mtime":1608743419710,"results":"19","hashOfConfig":"12"},{"size":1129,"mtime":1608921544485,"results":"20","hashOfConfig":"12"},{"size":133,"mtime":1608921777617,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"dbhku6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/nicolas/Documents/Development/slr-extraction-tool/src/index.js",[],["44","45"],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/App.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/reportWebVitals.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/navbar/Navbar.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/home/Home.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/architecture/ArchitectureList.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/architecture/Architecture.js",["46","47","48"],"import { useParams, useHistory } from 'react-router-dom';\nimport React, { useState, useContext } from 'react';\nimport { Button, Container, Jumbotron } from 'react-bootstrap';\nimport { Form, Table } from 'react-bootstrap';\nimport { architectures } from '../../assets/js/fakeData';\nimport { FaPen, FaTimes } from 'react-icons/fa';\nimport { UserContext } from '../../App';\n\nconst Architecture = ({opType}) => {\n    const getLabel = () => {\n        switch(opType) {\n            case 'new':\n            case 'edit':\n                return 'Save';\n            case 'view':\n                return 'Edit';\n        }\n    }\n\n    const initArchitecture = archId => {\n        //console.log('id : ' + id)\n        for(var i = 0; i < architectures.length; i++) {\n            //console.log('iteration')\n            //console.log(i, architectures[i])\n            if(parseInt(architectures[i].id) === parseInt(archId)) {\n                return architectures[i];\n            }\n        }\n\n        return {};\n    }\n\n    const formBtnHandler = id => {\n        if (pageOp === 'edit') {\n            setPageOp('view');\n            setFormBtnLabel('Edit')\n            history.push('/architecture/' + id);\n        } \n        else if (pageOp === 'view') {\n            setPageOp('edit');\n            setFormBtnLabel('Save')\n            history.push('/architecture/' + id + '/edit')\n        }\n    }\n\n    const getComponentArray = (arch) => {\n        if(arch[\"components\"]) {\n            return arch.components.map((c, i) => {\n                return(\n                    <tr key={\"comp_\" + i}>\n                        <td style={{cursor:\"pointer\"}} onClick={() => history.push(\"/component/\" + c.id)}>{c.id}</td>\n                        <td style={{cursor:\"pointer\"}} onClick={() => history.push(\"/component/\" + c.id)}>{c.name}</td>\n                        <td hidden={pageOp === 'view' ? true : false}>\n                            <Button variant=\"secondary\" size=\"sm\" onClick={() => history.push(\"/component/\" + c.id + \"/edit\")}><FaPen/></Button>&nbsp;\n                            <Button variant=\"danger\" size=\"sm\"><FaTimes/></Button>\n                        </td>\n                    </tr>\n                )\n            }) \n        }\n    }\n\n    const formUpdateHandler = e => {\n        switch(e.target.id) {\n            case 'formArchitecturePaper':\n                setArchitecture({\n                    ...architecture,\n                    paper: e.target.value\n                });\n                break;\n\n            case 'formArchitectureDesc':\n                setArchitecture({\n                    ...architecture,\n                    desc: e.target.value\n                });\n                break;\n\n            case 'formArchitectureDoneBy':\n                console.log(e.target)\n                setArchitecture({\n                    ...architecture,\n                    doneBy: e.target.value\n                })\n        }\n    }\n\n    const getUser = userId => {\n        switch(userId) {\n            case 1:\n                return \"Nicolas Six\";\n            case 2: \n                return \"Nicolas Herbaut\";\n            case 3: \n                return \"Claudia Negri Ribalta\";\n            default:\n                return \"Anonymous\";\n        }\n    }\n\n    const getForm = () => {\n        var a = false;\n        if(pageOp === 'view' || pageOp === 'edit') {\n            if (architecture === {}) {\n                return architectureNotFoundContainer()                   \n            }\n        }\n\n        return (\n            <Form onChange={formUpdateHandler.bind(this)}>\n                <h1>{pageOp === 'new' ? 'Create an architecture' : 'Architecture #' + architecture.id}</h1>\n                {pageOp === 'new' ? '' : <p className=\"lead\">By {getUser(architecture.doneBy)}</p>}\n                <hr/>\n                <Form.Group controlId=\"formArchitecturePaper\">\n                    <Form.Label>Associated paper</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Unknown\" defaultValue={pageOp === 'new' ? '' : architecture.paper} disabled={pageOp === 'view' ? true : false}/>\n                </Form.Group>\n                <Form.Group controlId=\"formArchitectureDesc\">\n                    <Form.Label>Architecture description</Form.Label>\n                    <Form.Control as=\"textarea\" rows=\"5\" placeholder=\"Unknown\" defaultValue={pageOp === 'new' ? '' : architecture.paper} disabled={pageOp === 'view' ? true : false}/>\n                </Form.Group>\n                <Form.Label>Writer</Form.Label>\n                <Form.Group controlId=\"formArchitectureDoneBy\">\n                    <Form.Control as=\"select\" disabled={pageOp === 'view' ? true : false} defaultValue={pageOp === 'new' ? user : architecture.doneBy}>\n                        <option value={0}>Anonymous</option>\n                        <option value={1}>Nicolas Six</option>\n                        <option value={2}>Nicolas Herbaut</option>\n                        <option value={3}>Claudia Negri Ribalta</option>\n                    </Form.Control>\n                </Form.Group>\n                <p>Components</p>\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                        <th hidden={pageOp === 'view' ? true : false}></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { getComponentArray(architecture) }\n                    </tbody>\n                </Table>\n                <Button variant=\"secondary\" onClick={() => history.push(\"/architectures/\")}>Return</Button>&nbsp;\n                <Button onClick={formBtnHandler.bind(this, architecture.id)}>{formBtnLabel}</Button>&nbsp;\n                <Button variant=\"success\" onClick={formBtnHandler.bind(this, architecture.id)} hidden={pageOp === 'view' ? true : false}>Add component</Button>\n            </Form>\n        )\n    }\n\n    const architectureNotFoundContainer = () => {\n        return(\n            <Jumbotron>\n            <h1>Architecture not found</h1>\n                <p>\n                    It seems that the architecture does not exists. It might have been deleted by another user, please return to the architecture page.\n                </p>\n                <p>\n                    <Button onClick={() => history.push('/architectures')}>Return to architectures</Button>\n                </p>\n            </Jumbotron>\n        )\n    }\n\n    let { id } = useParams();\n    const initialLabel = getLabel(opType)\n    const history = useHistory();\n    const user = useContext(UserContext);\n    const [pageOp, setPageOp] = useState(opType);\n    const [formBtnLabel, setFormBtnLabel] = useState(initialLabel)\n    const [architecture, setArchitecture] = useState(initArchitecture(id))\n\n    return <Container>{getForm()}</Container>\n}\n\nexport default Architecture;","/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/error/ErrorPage.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/assets/js/fakeData.js",[],"/Users/nicolas/Documents/Development/slr-extraction-tool/src/components/component/ArchitecturalComponent.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":11,"column":9,"nodeType":"55","messageId":"56","endLine":17,"endColumn":10},{"ruleId":"53","severity":1,"message":"54","line":64,"column":9,"nodeType":"55","messageId":"56","endLine":85,"endColumn":10},{"ruleId":"57","severity":1,"message":"58","line":102,"column":13,"nodeType":"59","messageId":"60","endLine":102,"endColumn":14},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'a' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]